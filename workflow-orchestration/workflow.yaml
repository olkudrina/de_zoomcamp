id: taxi_data
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: taxi type
    values: ['yellow', 'green']
    defaults: 'green'

  - id: year
    type: SELECT
    displayName: choose year
    values: ['2019', '2020', '2021', '2022']
    defaults: '2021'
  
  - id: month
    type: STRING
    displayName: type in month with leading zero
    defaults: '01'

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  staging_table: "public.{{inputs.taxi}}_tripdata_stage"
  table: "public.{{inputs.taxi}}_tripdata"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      username: root
      password: root

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels: 
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"
      month_year: "{{inputs.year}}-{{inputs.month}}"
  
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}
  
  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'green'}}"
    then: 
    - id: create_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
          unique_row_id text,
          filename text,
          VendorID text,
          lpep_pickup_datetime timestamp,
          lpep_dropoff_datetime timestamp,
          store_and_fwd_flag text,
          RatecodeID text,
          PULocationID text,
          DOLocationID text,
          passenger_count integer,
          trip_distance double precision,
          fare_amount double precision,
          extra double precision,
          mta_tax double precision,
          tip_amount double precision,
          tolls_amount double precision,
          ehail_fee double precision,
          improvement_surcharge double precision,
          total_amount double precision,
          payment_type integer,
          trip_type integer,
          congestion_surcharge double precision
        );
    - id: create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
          unique_row_id text,
          filename text,
          VendorID text,
          lpep_pickup_datetime timestamp,
          lpep_dropoff_datetime timestamp,
          store_and_fwd_flag text,
          RatecodeID text,
          PULocationID text,
          DOLocationID text,
          passenger_count integer,
          trip_distance double precision,
          fare_amount double precision,
          extra double precision,
          mta_tax double precision,
          tip_amount double precision,
          tolls_amount double precision,
          ehail_fee double precision,
          improvement_surcharge double precision,
          total_amount double precision,
          payment_type integer,
          trip_type integer,
          congestion_surcharge double precision
        );
    - id: truncate_stage_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      sql: |
        TRUNCATE TABLE {{render(vars.staging_table)}};
    - id: copy_to_stage
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      format: CSV
      from: "{{render(vars.data)}}"
      table: "{{render(vars.staging_table)}}"
      header: true
      columns: [
        VendorID,lpep_pickup_datetime,lpep_dropoff_datetime,
        store_and_fwd_flag,RatecodeID,PULocationID,
        DOLocationID,passenger_count,trip_distance,
        fare_amount,extra,mta_tax,tip_amount,
        tolls_amount,ehail_fee,improvement_surcharge,
        total_amount,payment_type,trip_type,congestion_surcharge
      ]
    - id: add_unique_id_and_filename
      type: io.kestra.plugin.jdbc.postgresql.Queries
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      sql: |
        UPDATE {{render(vars.staging_table)}}
        SET
          unique_row_id = md5(
            COALESCE(VendorID::text, '') ||
            COALESCE(lpep_pickup_datetime::text, '') ||
            COALESCE(lpep_dropoff_datetime::text, '') ||
            COALESCE(store_and_fwd_flag::text, '') ||
            COALESCE(RatecodeID::text, '') ||
            COALESCE(PULocationID::text, '') ||
            COALESCE(DOLocationID::text, '') ||
            COALESCE(passenger_count::text, '') ||
            COALESCE(trip_distance::text, '') ||
            COALESCE(fare_amount::text, '') ||
            COALESCE(extra::text, '') ||
            COALESCE(mta_tax::text, '') ||
            COALESCE(tip_amount::text, '') ||
            COALESCE(tolls_amount::text, '') ||
            COALESCE(ehail_fee::text, '') ||
            COALESCE(improvement_surcharge::text, '') ||
            COALESCE(total_amount::text, '') ||
            COALESCE(payment_type::text, '') ||
            COALESCE(trip_type::text, '') ||
            COALESCE(congestion_surcharge::text, '')
          ),
          filename = '{{render(vars.file)}}';
    - id: add_data_to_main_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      sql: |
        MERGE INTO {{render(vars.table)}} as t
        USING {{render(vars.staging_table)}} as s
        ON t.unique_row_id = s.unique_row_id
        WHEN NOT MATCHED THEN INSERT (
          unique_row_id,filename,
          VendorID,lpep_pickup_datetime,lpep_dropoff_datetime,
          store_and_fwd_flag,RatecodeID,PULocationID,
          DOLocationID,passenger_count,trip_distance,
          fare_amount,extra,mta_tax,tip_amount,
          tolls_amount,ehail_fee,improvement_surcharge,
          total_amount,payment_type,trip_type,congestion_surcharge
        )
        VALUES (
          s.unique_row_id,s.filename,
          s.VendorID,s.lpep_pickup_datetime,s.lpep_dropoff_datetime,
          s.store_and_fwd_flag,s.RatecodeID,s.PULocationID,
          s.DOLocationID,s.passenger_count,s.trip_distance,
          s.fare_amount,s.extra,s.mta_tax,s.tip_amount,
          s.tolls_amount,s.ehail_fee,s.improvement_surcharge,
          s.total_amount,s.payment_type,s.trip_type,s.congestion_surcharge
        )
    else:
      - id: create_table_yellow
        type: io.kestra.plugin.jdbc.postgresql.Queries
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
            unique_row_id text,
            filename text,
            VendorID text,
            tpep_pickup_datetime timestamp,
            tpep_dropoff_datetime timestamp,
            passenger_count integer,
            trip_distance double precision,
            RatecodeID text,
            store_and_fwd_flag text,
            PULocationID text,
            DOLocationID text,
            payment_type integer,
            fare_amount double precision,
            extra double precision,
            mta_tax double precision,
            tip_amount double precision,
            tolls_amount double precision,
            improvement_surcharge double precision,
            total_amount double precision,
            congestion_surcharge double precision
          );
      - id: create_staging_table_yellow
        type: io.kestra.plugin.jdbc.postgresql.Queries
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
            unique_row_id text,
            filename text,
            VendorID text,
            tpep_pickup_datetime timestamp,
            tpep_dropoff_datetime timestamp,
            passenger_count integer,
            trip_distance double precision,
            RatecodeID text,
            store_and_fwd_flag text,
            PULocationID text,
            DOLocationID text,
            payment_type integer,
            fare_amount double precision,
            extra double precision,
            mta_tax double precision,
            tip_amount double precision,
            tolls_amount double precision,
            improvement_surcharge double precision,
            total_amount double precision,
            congestion_surcharge double precision

          );
      - id: truncate_stage_table_yellow
        type: io.kestra.plugin.jdbc.postgresql.Queries
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        sql: |
          TRUNCATE TABLE {{render(vars.staging_table)}};
      - id: copy_to_stage_yellow
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        format: CSV
        from: "{{render(vars.data)}}"
        table: "{{render(vars.staging_table)}}"
        header: true
        columns: [
          VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,
          passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,
          PULocationID,DOLocationID,payment_type,fare_amount,extra,
          mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,
          congestion_surcharge
        ]
      - id: add_unique_id_and_filename_yellow
        type: io.kestra.plugin.jdbc.postgresql.Queries
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        sql: |
          UPDATE {{render(vars.staging_table)}}
          SET
            unique_row_id = md5(
              COALESCE(VendorID::text, '') ||
              COALESCE(tpep_pickup_datetime::text, '') ||
              COALESCE(tpep_dropoff_datetime::text, '') ||
              COALESCE(store_and_fwd_flag::text, '') ||
              COALESCE(RatecodeID::text, '') ||
              COALESCE(PULocationID::text, '') ||
              COALESCE(DOLocationID::text, '') ||
              COALESCE(passenger_count::text, '') ||
              COALESCE(trip_distance::text, '') ||
              COALESCE(fare_amount::text, '') ||
              COALESCE(extra::text, '') ||
              COALESCE(mta_tax::text, '') ||
              COALESCE(tip_amount::text, '') ||
              COALESCE(tolls_amount::text, '') ||
              COALESCE(improvement_surcharge::text, '') ||
              COALESCE(total_amount::text, '') ||
              COALESCE(payment_type::text, '') ||
              COALESCE(congestion_surcharge::text, '')
            ),
            filename = '{{render(vars.file)}}';
      - id: add_data_to_main_table_yellow
        type: io.kestra.plugin.jdbc.postgresql.Queries
        url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
        sql: |
          MERGE INTO {{render(vars.table)}} as t
          USING {{render(vars.staging_table)}} as s
          ON t.unique_row_id = s.unique_row_id
          WHEN NOT MATCHED THEN INSERT (
            unique_row_id,filename,
            VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,
            passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,
            PULocationID,DOLocationID,payment_type,fare_amount,extra,
            mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,
            congestion_surcharge
          )
          VALUES (
            s.unique_row_id,s.filename,
            s.VendorID,s.tpep_pickup_datetime,s.tpep_dropoff_datetime,
            s.passenger_count,s.trip_distance,s.RatecodeID,s.store_and_fwd_flag,
            s.PULocationID,s.DOLocationID,s.payment_type,s.fare_amount,s.extra,
            s.mta_tax,s.tip_amount,s.tolls_amount,s.improvement_surcharge,s.total_amount,
            s.congestion_surcharge
          )

  - id: remove_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
